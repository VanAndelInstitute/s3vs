AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lambda and API Gateway resources for s3vs'
Parameters:
  Stage:
    Type: String
    Description: API stage name
    Default: "$default"
    MaxLength: 128
    AllowedPattern: "(\\$default|[a-zA-Z_0-9]*)"
  SlidesBucketName:
    Type: String
    Description: Name of the bucket for uploading slides
    MinLength: 3
    MaxLength: 63
    AllowedPattern: "(?!^(\\d{1,3}\\.){3}\\d{1,3}$)(^[a-z0-9]([a-z0-9-]*(\\.[a-z0-9])?)*$(?<!\\-))"
  UseExistingBucket:
    Type: String
    Description: Don't create the slides bucket or the import function
    Default: "No"
  UploadURL:
    Type: String
    Description: URL of the metadata upload endpoint
    Default: ""
  SecretName:
    Type: String
    Description: Secret name for the upload endpoint credentials
    Default: ""
  SecretArn:
    Type: String
    Description: Secret ARN for the upload endpoint credentials
    Default: ""
  CustomDomainName:
    Type: String
    Description: FQDN of the API custom domain
  OpenSlideLayer:
    Type: String
    Description:  ARN of the Lambda layer version for OpenSlide
  PillowSIMDLayer:
    Type: String
    Description:  ARN of the Lambda layer version for PillowSIMD
  libdmtxLayer:
    Type: String
    Description:  ARN of the Lambda layer version for libdmtx
  IccProfilesLayer:
    Type: String
    Description:  ARN of the Lambda layer version for ICC profile files
  FrameAncestors:
    Type: String
    Description: URL of the metadata upload endpoint
    Default: "'none'"

Conditions:
  CreateNewSlidesBucket: !Equals [!Ref UseExistingBucket, "No"]

Resources:
  SlidesBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewSlidesBucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref SlidesBucketName
  SigningProfile:
    Type: AWS::Signer::SigningProfile
    Properties: 
      PlatformId: AWSLambda-SHA384-ECDSA
      SignatureValidityPeriod: 
        Type: YEARS
        Value: 5
  CodeSigningConfig:
    Type: AWS::Lambda::CodeSigningConfig
    Properties: 
      AllowedPublishers: 
        SigningProfileVersionArns:
          - !GetAtt SigningProfile.ProfileVersionArn
      CodeSigningPolicies: 
          UntrustedArtifactOnDeployment: Enforce
      Description: !Sub ${AWS::StackName}-signing
  ImageService:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ImageService
      CodeUri: image-service
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 15
      MemorySize: 640
      CodeSigningConfigArn: !Ref CodeSigningConfig
      Environment:
        Variables:
          API_URL: !Sub https://${CustomDomainName}/${AWS::StackName}/image-service/
          BUCKET_NAME: !Ref SlidesBucketName
          FRAME_ANCESTORS: !Ref FrameAncestors
      Layers:
        - !Ref OpenSlideLayer
        - !Ref PillowSIMDLayer
        - !Ref IccProfilesLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SlidesBucketName
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /image-service/{imagePath+}
            Method: GET
  ImportMetadata:
    Type: AWS::Serverless::Function
    Condition: CreateNewSlidesBucket
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ImportMetadata
      CodeUri: import-metadata
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 512
      CodeSigningConfigArn: !Ref CodeSigningConfig
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 180
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          UPLOAD_URL: !Ref UploadURL
          SECRET_NAME: !Ref SecretName
          REGION_NAME: !Ref AWS::Region
      Layers:
        - !Ref OpenSlideLayer
        - !Ref PillowSIMDLayer
        - !Ref libdmtxLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SlidesBucketName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretArn
      Events:
        UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref SlidesBucket
            Events: s3:ObjectCreated:*
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Stage
      CorsConfiguration:
        AllowMethods: [GET]
        AllowOrigins: ['*']
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - HttpApiStage
    Properties: 
      ApiId: !Ref HttpApi
      ApiMappingKey: !Ref AWS::StackName
      DomainName: !Ref CustomDomainName
      Stage: !Ref Stage

Outputs:
  ApiId:
    Description: Id of HttpApi
    Value: !Ref HttpApi
  ApiUrl:
    Description: URL of the API endpoint
    Value: !Sub https://${CustomDomainName}/${AWS::StackName}/
